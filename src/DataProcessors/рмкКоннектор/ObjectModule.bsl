Перем Компонента;

&Сервер	
Процедура Инициализировать() Экспорт
	
    ПодключениеВКУспешно = ПодключитьВнешнююКомпоненту("ОбщийМакет.PinkRabbitMQ3_v2_1_1_149_x64", "BITERP", ТипВнешнейКомпоненты.Native);
    
    Если Не ПодключениеВКУспешно Тогда
    	ВызватьИсключение "Не удалось подключить внешнюю компоненту PinkRabbitMQ";
    КонецЕсли;	
    
    Компонента = Новый("AddIn.BITERP.PinkRabbitMQ3"); 
   	
КонецПроцедуры

Процедура Подключиться(ВиртуальныйХост) Экспорт
	
	ПараметрыВиртуальногоХоста = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъектов(ВиртуальныйХост, "Владелец,Наименование");
	ПараметрыСервера = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъектов(ПараметрыВиртуальногоХоста.Владелец, "Адрес,Порт,ИмяПользователя,Пароль");
	Компонента.Connect(ПараметрыСервера.Адрес, ПараметрыСервера.Порт, ПараметрыСервера.ИмяПользователя, ПараметрыСервера.Пароль, ПараметрыВиртуальногоХоста.Наименование);
	
КонецПроцедуры

Процедура ОтправитьСообщение(Сообщение) Экспорт
	
	//@skip-warning
	ИмяОчереди = рмкОбщегоНазначенияПереопределяемый.ЗначениеРеквизитаОбъекта(Сообщение.ТочкаПодключения, "ИмяТочки");
	//@skip-warning
	СодержимоеСообщения = Сообщение.Данные.Получить();
	
	Попытка
	
		//@skip-warning
		Компонента.BasicPublish("", ИмяОчереди, СодержимоеСообщения, 0, Ложь);
		рмкОбработкаСообщений.ЗафиксироватьСтатусСообщения(Сообщение.Ссылка, "Отправлено");
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		рмкОбработкаСообщений.ЗафиксироватьСтатусСообщения(Сообщение, "Ошибка", ПодробноеПредставлениеОшибки);
		
	КонецПопытки	
	
КонецПроцедуры	

Процедура Закрыть() Экспорт
	
	Компонента = Неопределено;
	
КонецПроцедуры	

Процедура ПолучитьСообщенияИзОчереди(СлушательОчереди) Экспорт
	
	ПрочитанноеСообщение = "";
    ТегСообщения = 0;
	
	//Попытка
		
		ИмяОчереди = рмкОбщегоНазначенияПереопределяемый.ЗначениеРеквизитаОбъекта(СлушательОчереди, "ИмяОчереди");
        Потребитель = Компонента.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
        
        Пока Компонента.BasicConsumeMessage("", ПрочитанноеСообщение, ТегСообщения, 5000) Цикл
           
           	// запишем сообщение
           	ЗаписатьВходящееСообщение(СлушательОчереди, ПрочитанноеСообщение);
           
            Компонента.BasicAck(ТегСообщения);
            ПрочитанноеСообщение = ""; 			// Обнуляем, чтобы избежать утечку памяти
            ТегСообщения = 0; 					// Обнуляем, чтобы избежать утечку памяти
            
        КонецЦикла;
        
        Компонента.BasicCancel("");
        
    //Исключение
     //   Сообщить(Компонента.GetLastError());
    //КонецПопытки;
	
КонецПроцедуры	

Процедура ЗаписатьВходящееСообщение(СлушательОчереди, ПрочитанноеСообщение)
	
	СписокРеквизитов = "Сервер,ВиртуальныйХост,ИмяОчереди,СпособСериализации,ИмяМетодаСериализации";
	//@skip-warning
	РеквизитыСлушателя = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъектов(СлушательОчереди, СписокРеквизитов);
	Статус = ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений.Получено");
	
	СообщениеОбъект = Справочники.рмкВходящиеСообщения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СообщениеОбъект, РеквизитыСлушателя);
	СообщениеОбъект.Данные = Новый ХранилищеЗначения(ПрочитанноеСообщение);
	СообщениеОбъект.ТекущийСтатус = Статус;
	СообщениеОбъект.Записать();
	
	//@skip-warning
	рмкОбработкаСообщений.ЗафиксироватьСтатусСообщения(СообщениеОбъект.Ссылка, Статус, "", Истина);
	
КонецПроцедуры