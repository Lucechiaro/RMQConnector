
Procedure ПриЗаписиОбъектаРепликации(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	// TODO
	// возможно, тут есть смысл запустить фоновое задание по созданию исходящего сообщения
	Для Каждого ТочкаПодключения Из ТочкиПодключенияДляОбъекта(Источник) Цикл
		СоздатьИсходящееСообщение(Источник, ТочкаПодключения);
	КонецЦикла;	
	
EndProcedure

Функция ТочкиПодключенияДляОбъекта(Источник)
	
	ПолноеИмяМетаданных = Источник.Метаданные().ПолноеИмя();
	ТочкиПодключения 	= Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкТочкиПодключения.Ссылка
	|ИЗ
	|	Справочник.рмкТочкиПодключения КАК рмкТочкиПодключения
	|ГДЕ
	|	рмкТочкиПодключения.ПолноеИмяМетаданных = &ПолноеИмяМетаданных
	|	И НЕ рмкТочкиПодключения.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПолноеИмяМетаданных", ПолноеИмяМетаданных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТочкиПодключения.Добавить(Выборка.ТочкаПодключения);
	КонецЦикла;	
	
	Возврат ТочкиПодключения;
	
КонецФункции	

Процедура СоздатьИсходящееСообщение(ОбъектДляСериализации, ТочкаПодключения)
	
	ID = Новый УникальныйИдентификатор;
	
	СообщениеОбъект = Справочники.рмкВходящиеСообщения.СоздатьОбъект();
	СообщениеОбъект.ТекущийСтатус 	= ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений.Создано");
	СообщениеОбъект.Сервер 			= ТочкаПодключения.Сервер; // TODO использовать ОбщегоНазначения.ЗначениеРеквизитаОбъекта
	СообщениеОбъект.ТочкаПодключения = ТочкаПодключения;
	СообщениеОбъект.ВиртуальныйХост = ТочкаПодключения.ВиртуальныйХост;
	СообщениеОбъект.ID = ID;

	ДанныеСообщения = Новый Структура("ID", ID);
	ПолучитьДанныеСообщения(ДанныеСообщения, ОбъектДляСериализации, ТочкаПодключения);
	ТекстСообщения = ЗаписатьОбъектВJSON(ДанныеСообщения);
	СообщениеОбъект.Данные = Новый ХранилищеЗначения(ТекстСообщения);
	
	СообщениеОбъект.Записать();
	
КонецПроцедуры	

Функция ПолучитьДанныеСообщения(ДанныеСообщения, Знач ОбъектДляСериализации, ТочкаПодключения) 
	
	Если ТочкаПодключения.ТипСериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера") 
		Или ТочкаПодключения.ТипСериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера") Тогда
	
		ОбъектДляСериализации = ПолучитьСтруктуруОбъектаЧерезМенеджер(ОбъектДляСериализации, ТочкаПодключения);
	
	КонецЕсли;	
	
	СформироватьСтруктуруСообщения(ДанныеСообщения, ОбъектДляСериализации, ТочкаПодключения);
	
КонецФункции

Функция ЗаписатьОбъектВJSON(ОбъектДляСериализации)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектДляСериализации);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции	

Процедура СформироватьСтруктуруСообщения(ДанныеСообщения, ОбъектДляСериализации, ТочкаПодключения)
	
	ИДСообщения = Строка(Новый УникальныйИдентификатор);
	
	ДанныеСообщения.Вставить("ID", 		ДанныеСообщения.ID);
	ДанныеСообщения.Вставить("Type", 	ТочкаПодключения.ТипСообщения);
	ДанныеСообщения.Вставить("Content", ОбъектДляСериализации);
	
КонецПроцедуры

Функция ПолучитьСтруктуруОбъектаЧерезМенеджер(Знач ОбъектДляСериализации, ТочкаПодключения)
	
	Если ТочкаПодключения.ТипСериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера") Тогда
		МенеджерКонвертации = Обработки.рмкМенеджерКонвертации.Создать();	
	ИначеЕсли ТочкаПодключения.ТипСериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодПодключаемогоМенеджера") Тогда
		
		ПодключитьВнешнююОбработкуМенеджераКонвертации();
		МенеджерКонвертации = ВнешниеОбработки.рмкМенеджерКонвертации.Создать();			
				
	Иначе
		ВызватьИсключение "Неправильный тип сериализации в точке";
	КонецЕсли;
	
	МенеджерКонвертации.ВыполнитьМетод(ОбъектДляСериализации, ТочкаПодключения.ИмяМетодаСериализации);
	
	Возврат ОбъектДляСериализации;
	
КонецФункции

Процедура ПодключитьВнешнююОбработкуМенеджераКонвертации()
	
	ДвоичныеДанныеОбработки = Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	ВнешниеОбработки.Подключить(ИмяВременногоФайла, "рмкМенеджерКонвертации", Ложь);
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры		

	


