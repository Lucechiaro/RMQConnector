#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

Procedure ПриЗаписиОбъектаРепликации(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТочкаПодключения Из ТочкиПодключенияДляОбъекта(Источник) Цикл
		СоздатьИсходящееСообщение(Источник, ТочкаПодключения);
	КонецЦикла;	
	
EndProcedure

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

Процедура ПолучитьСообщенияИзОчередей() Экспорт
	// TODO
КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеДокументов() Экспорт
	// TODO
КонецПроцедуры

Процедура ОчиститьУстаревшиеСообщения() Экспорт
	// TODO
КонецПроцедуры

#КонецОбласти 

Функция ПодключаемыйМенеджерКонвертацииСуществует() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить() <> Неопределено;
	
КонецФункции

Процедура ОбработатьВходящиеСообщения(ВходящиеСообщения) Экспорт
	
	МенеджерыКонвертации = СоздатьМенеджерыКонвертации();

	Для Каждого Сообщение Из ВходящиеСообщения Цикл
				
		МенеджерКонвертации = ПолучитьМенеджерКонвертации(МенеджерыКонвертации, Сообщение.СпособСериализации);
		ДанныеДляРаспаковки = Сообщение.Данные.Получить();
		
		Если ДанныеДляРаспаковки = Неопределено Тогда
			
			ЗафиксироватьСтатусСообщения(Сообщение, "Ошибка", "Сообщение не содержит данные");
			Продолжить;
			
		КонецЕсли;	
		
		КонтейнерСообщения = ДесериализоватьОбъект(ДанныеДляРаспаковки);

		Попытка 
			
			МенеджерКонвертации.ВыполнитьМетод(Сообщение.ИмяМетодаСериализации, КонтейнерСообщения);
			ЗафиксироватьСтатусСообщения(Сообщение, "Обработано");
			
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗафиксироватьСтатусСообщения(Сообщение, "Ошибка", ПодробноеПредставлениеОшибки);
			
		КонецПопытки;	
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗафиксироватьСтатусСообщения(Сообщение, СтатусСтрокой, Информация = "", ЗаписыватьСообщение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СтатусСтрокой) = Тип("Строка") Тогда
		Статус = ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений." + СтатусСтрокой);
	Иначе
		Статус = СтатусСтрокой;
	КонецЕсли;			
	
	Если ЗаписыватьСообщение = Истина Тогда
		
		СообщениеОбъект = Сообщение.ПолучитьОбъект();
		СообщениеОбъект.ТекущийСтатус = Статус;
		СообщениеОбъект.Записать();
		
	КонецЕсли;	
	
	МенеджерЗаписи = РегистрыСведений.рмкСтатусыСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период	 		= ТекущаяДатаСеанса();
	МенеджерЗаписи.Сообщение 		= Сообщение;
	МенеджерЗаписи.Идентификатор 	= Новый УникальныйИдентификатор;
	МенеджерЗаписи.Статус 			= Статус;
	МенеджерЗаписи.Информация 		= Информация;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ПолучитьМенеджерКонвертации(Менеджеры = Неопределено, СпособСериализации) Экспорт
	
	Если Менеджеры = Неопределено Тогда
		Менеджеры = СоздатьМенеджерыКонвертации();
	КонецЕсли;	
	
	МенеджерКонвертации = Менеджеры.Получить(СпособСериализации);
	
	Если МенеджерКонвертации = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не инициализирован менеджер конвертации для способа %1", СпособСериализации);
	КонецЕсли;
	
	Возврат МенеджерКонвертации;
	
КонецФункции	

#КонецОбласти 
	
#Область СлужебныеПроцедурыИФункции

Функция ТочкиПодключенияДляОбъекта(Источник)
	
	ПолноеИмяМетаданных = Источник.Метаданные().ПолноеИмя();
	ТочкиПодключения 	= Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкТочкиПодключения.Ссылка Как ТочкаПодключения
	|ИЗ
	|	Справочник.рмкТочкиПодключения КАК рмкТочкиПодключения
	|ГДЕ
	|	рмкТочкиПодключения.ПолноеИмяМетаданных = &ПолноеИмяМетаданных
	|	И НЕ рмкТочкиПодключения.ПометкаУдаления
	|	И рмкТочкиПодключения.Активна";
	Запрос.УстановитьПараметр("ПолноеИмяМетаданных", ПолноеИмяМетаданных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТочкиПодключения.Добавить(Выборка.ТочкаПодключения);
	КонецЦикла;	
	
	Возврат ТочкиПодключения;
	
КонецФункции

Процедура СоздатьИсходящееСообщение(ОбъектДляСериализации, ТочкаПодключения)
	
	ID = Строка(Новый УникальныйИдентификатор);
	РеквизитыТочки = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъектов(ТочкаПодключения, "Сервер,ВиртуальныйХост");
	
	СообщениеОбъект = Справочники.рмкИсходящиеСообщения.СоздатьЭлемент();
	СообщениеОбъект.ТекущийСтатус 		= ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений.Создано");
	СообщениеОбъект.Сервер 				= РеквизитыТочки.Сервер;
	СообщениеОбъект.ТочкаПодключения 	= ТочкаПодключения;
	СообщениеОбъект.ВиртуальныйХост 	= РеквизитыТочки.ВиртуальныйХост;
	СообщениеОбъект.Код = ID;

	ДанныеСообщения 		= ПолучитьДанныеСообщения(ОбъектДляСериализации, ID, ТочкаПодключения);
	КонтейнерСообщения 		= СериализоватьОбъект(ДанныеСообщения);
	СообщениеОбъект.Данные 	= Новый ХранилищеЗначения(КонтейнерСообщения);
	СообщениеОбъект.Записать();
	
	ЗафиксироватьСтатусСообщения(СообщениеОбъект.Ссылка, "Создано");
	
КонецПроцедуры	

Функция ПолучитьДанныеСообщения(ОбъектДляСериализации, ID, ТочкаПодключения) 
	
	ДанныеСообщения = Новый Структура; 
	ДанныеСообщения.Вставить("ID", ID);
				
	МенеджерыКонвертации 	= СоздатьМенеджерыКонвертации();
	МенеджерКонвертации 	= МенеджерыКонвертации.Получить(ТочкаПодключения.СпособСериализации);
	ПараметрыКонвертации 	= Новый Структура("ОбъектДляСериализации, ДанныеСообщения", ОбъектДляСериализации, ДанныеСообщения);

	МенеджерКонвертации.ВыполнитьМетод(ТочкаПодключения.ИмяМетодаСериализации, ПараметрыКонвертации);

	Возврат ДанныеСообщения;
	
КонецФункции

#Область Сериализация

Функция ЗаписатьОбъектВJSON(ОбъектДляСериализации)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	Если ОбъектДляСериализации.Свойство("SerializationMetod") 
			И ОбъектДляСериализации.SerializationMetod = "1CXDTO"	Тогда
	
  		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектДляСериализации);
  	
	Иначе
		
		ЗаписатьJSON(ЗаписьJSON, ОбъектДляСериализации);
		
	КонецЕсли;	
  		
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции	

Функция СериализоватьОбъект(ОбъектДляСериализации)
	
	// пока только JSON, потом, возможно, будет больше
	Возврат ЗаписатьОбъектВJSON(ОбъектДляСериализации);
	
КонецФункции

Функция ДесериализоватьОбъект(Данные)
	
	// пока только JSON, потом, возможно, будет больше
	Возврат ПрочитатьОбъектИзJSON(Данные);
	
КонецФункции	

Функция ПрочитатьОбъектИзJSON(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
  	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
  	
  	Если ЭтоФорматXTDO(СтрокаJSON) Тогда 
  		Результат = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("Структура"));
  	Иначе	  	
  		Результат = ПрочитатьJSON(ЧтениеJSON, Ложь);
  	КонецЕсли;
  	
  	ЧтениеJSON.Закрыть();
    
  	Возврат Результат;
	
КонецФункции

// немного костыльный метод
Функция ЭтоФорматXTDO(СтрокаJSON)
	
	Возврат СтрНайти(СтрокаJSON, """SerializationMetod"": ""1CXDTO""") > 0;
	
КонецФункции

#КонецОбласти 

#Область ПодключениеМенеджеровКонвертации

Процедура ПодключитьВнешнююОбработкуМенеджераКонвертации()
	
	ДвоичныеДанныеОбработки = Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	ВнешниеОбработки.Подключить(ИмяВременногоФайла, "рмкМенеджерКонвертации", Ложь);
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Функция СоздатьМенеджерыКонвертации()
	
	Менеджеры = Новый Соответствие;
	Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкМенеджерыКонвертации.ВстроенныйМенеджер"), Обработки.рмкМенеджерКонвертации.Создать());
	
	Если ПодключаемыйМенеджерКонвертацииСуществует() Тогда
	
		ПодключитьВнешнююОбработкуМенеджераКонвертации();
		Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкМенеджерыКонвертации.ПодключаемыйМенеджер"), ВнешниеОбработки.рмкМенеджерКонвертации.Создать());
		
	КонецЕсли;
	
	Возврат Менеджеры;
	
КонецФункции		

#КонецОбласти 

#КонецОбласти 

	

	


	