Процедура ОбработатьВходящиеСообщения(ВходящиеСообщения) Экспорт
	
	МенеджерыКонвертации = СоздатьМенеджерыКонвертации();

	Для Каждого Сообщение Из ВходящиеСообщения Цикл
		
		МенеджерКонвертации = МенеджерыКонвертации.Получить(Сообщение.СпособСериализации);
		ДанныеДляРаспаковки = Сообщение.Данные.Получить();
		
		Если ДанныеДляРаспаковки = Неопределено Тогда
			// TODO записать статус сообщения с ошибкой
			Продолжить;
		КонецЕсли;	
		
		КонтейнерСообщения = ДесериализоватьОбъект(ДанныеДляРаспаковки);
		
		Если МенеджерКонвертации = Неопределено Тогда
			ОбъектДляЗаписи = КонтейнерСообщения; // специально не преобразуем объект
		Иначе	
			ОбъектДляЗаписи = МенеджерыКонвертации.ВыполнитьМетод(Сообщение.ИмяМетодаСериализации, КонтейнерСообщения);
		КонецЕсли;
		
		// или же вынести бизнес-логику записи объекта в менеджер. так удобнее
		Если ОбъектДляЗаписи <> Неопределено Тогда
			
			Попытка
				ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
				ОбъектДляЗаписи.Записать();
			Исключение
				// TODO записать статус сообщения с ошибкой
			КонецПопытки;
				
		Иначе
			// TODO записать статус сообщения с другой ошибкой		
		КонецЕсли;			
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеДокументов() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПолучитьСообщенияИзОчередей() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ОчиститьУстаревшиеСообщения() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Функция ПолучитьОбработчикСообщения(Сообщение)
	
	Если Сообщение.СпособДесериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера") Тогда
		МенеджерКонвертации = Обработки.рмкМенеджерКонвертации.Создать();	
	ИначеЕсли Сообщение.СпособДесериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодПодключаемогоМенеджера") Тогда
		
		ПодключитьВнешнююОбработкуМенеджераКонвертации();
		МенеджерКонвертации = ВнешниеОбработки.рмкМенеджерКонвертации.Создать();			
				
	Иначе
		ВызватьИсключение "Неправильный тип сериализации в сообщении";
	КонецЕсли;
	
КонецФункции	

Procedure ПриЗаписиОбъектаРепликации(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	// TODO
	// возможно, тут есть смысл запустить фоновое задание по созданию исходящего сообщения
	Для Каждого ТочкаПодключения Из ТочкиПодключенияДляОбъекта(Источник) Цикл
		СоздатьИсходящееСообщение(Источник, ТочкаПодключения);
	КонецЦикла;	
	
EndProcedure

Функция ТочкиПодключенияДляОбъекта(Источник)
	
	ПолноеИмяМетаданных = Источник.Метаданные().ПолноеИмя();
	ТочкиПодключения 	= Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рмкТочкиПодключения.Ссылка Как ТочкаПодключения
	|ИЗ
	|	Справочник.рмкТочкиПодключения КАК рмкТочкиПодключения
	|ГДЕ
	|	рмкТочкиПодключения.ПолноеИмяМетаданных = &ПолноеИмяМетаданных
	|	И НЕ рмкТочкиПодключения.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПолноеИмяМетаданных", ПолноеИмяМетаданных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТочкиПодключения.Добавить(Выборка.ТочкаПодключения);
	КонецЦикла;	
	
	Возврат ТочкиПодключения;
	
КонецФункции	

Процедура СоздатьИсходящееСообщение(ОбъектДляСериализации, ТочкаПодключения)
	
	ID = Новый УникальныйИдентификатор;
	РеквизитыТочки = рмкОбщегоНазначенияПереопределяемый.ЗначенияРеквизитовОбъектов(ТочкаПодключения, "Сервер,ВиртуальныйХост");
	
	СообщениеОбъект = Справочники.рмкИсходящиеСообщения.СоздатьЭлемент();
	СообщениеОбъект.ТекущийСтатус 		= ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений.Создано");
	СообщениеОбъект.Сервер 				= РеквизитыТочки.Сервер;
	СообщениеОбъект.ТочкаПодключения 	= ТочкаПодключения;
	СообщениеОбъект.ВиртуальныйХост 	= РеквизитыТочки.ВиртуальныйХост;
	СообщениеОбъект.Код = ID;

	ДанныеСообщения 		= ПолучитьДанныеСообщения(ОбъектДляСериализации, ID, ТочкаПодключения);
	КонтейнерСообщения 		= СериализоватьОбъект(ДанныеСообщения);
	СообщениеОбъект.Данные 	= Новый ХранилищеЗначения(КонтейнерСообщения);
	
	СообщениеОбъект.Записать();
	
КонецПроцедуры	

Функция ПолучитьДанныеСообщения(ОбъектДляСериализации, ID, ТочкаПодключения) 
	
	ДанныеСообщения = Новый Структура; 
	ДанныеСообщения.Вставить("ID", 		ID);
	ДанныеСообщения.Вставить("Type", 	ТочкаПодключения.ТипСообщения);
			
	МенеджерыКонвертации 	= СоздатьМенеджерыКонвертации();
	МенеджерКонвертации 	= МенеджерыКонвертации.Получить(ТочкаПодключения.СпособСериализации);
	
	Если МенеджерКонвертации = Неопределено Тогда
		ОбъектДляУпаковки = ОбъектДляСериализации; // специально не преобразуем объект
	Иначе	
		ОбъектДляУпаковки = МенеджерыКонвертации.ВыполнитьМетод(ТочкаПодключения.ИмяМетодаСериализации, ОбъектДляСериализации);
	КонецЕсли;
	
	ДанныеСообщения.Вставить("Content", ОбъектДляУпаковки);
	
	//СформироватьСтруктуруСообщения(ДанныеСообщения, ОбъектДляУпаковки, ТочкаПодключения);
	Возврат ДанныеСообщения;
	
КонецФункции

Функция ЗаписатьОбъектВJSON(ОбъектДляСериализации)
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектДляСериализации);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции	

Функция СериализоватьОбъект(ОбъектДляСериализации)
	
	// пока только JSON, потом, возможно, будет больше
	Возврат ЗаписатьОбъектВJSON(ОбъектДляСериализации);
	
КонецФункции

Функция ДесериализоватьОбъект(Данные)
	
	// пока только JSON, потом, возможно, будет больше
	Возврат ПрочитатьОбъектИзJSON(Данные);
	
КонецФункции	

Функция ПрочитатьОбъектИзJSON(СтрокаJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		
	Возврат СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	
КонецФункции

// возможно, удалить эту процедуру
Процедура СформироватьСтруктуруСообщения(ДанныеСообщения, ОбъектДляСериализации, ТочкаПодключения)
	
	ИДСообщения = Строка(Новый УникальныйИдентификатор);
	
	ДанныеСообщения.Вставить("ID", 		ДанныеСообщения.ID);
	ДанныеСообщения.Вставить("Type", 	ТочкаПодключения.ТипСообщения);
	ДанныеСообщения.Вставить("Content", ОбъектДляСериализации);
	
КонецПроцедуры

Функция ПолучитьСтруктуруОбъектаЧерезМенеджер(Знач ОбъектДляСериализации, ТочкаПодключения)
	
	Если ТочкаПодключения.СпособСериализации = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера") Тогда
		МенеджерКонвертации = Обработки.рмкМенеджерКонвертации.Создать();	
	ИначеЕсли ТочкаПодключения.СпособСериализацииОбъекта = ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодПодключаемогоМенеджера") Тогда
		
		ПодключитьВнешнююОбработкуМенеджераКонвертации();
		МенеджерКонвертации = ВнешниеОбработки.рмкМенеджерКонвертации.Создать();			
				
	Иначе
		ВызватьИсключение "Неправильный тип сериализации в точке";
	КонецЕсли;
	
	МенеджерКонвертации.ВыполнитьМетод(ОбъектДляСериализации, ТочкаПодключения.ИмяМетодаСериализации);
	
	Возврат ОбъектДляСериализации;
	
КонецФункции

Функция ПодключаемыйМенеджерКонвертацииСуществует()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить() <> Неопределено;
	
КонецФункции	

Процедура ПодключитьВнешнююОбработкуМенеджераКонвертации()
	
	ДвоичныеДанныеОбработки = Константы.рмкХранилищеПодключаемогоМенеджераКонвертации.Получить().Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанныеОбработки.Записать(ИмяВременногоФайла);
	ВнешниеОбработки.Подключить(ИмяВременногоФайла, "рмкМенеджерКонвертации", Ложь);
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Функция СоздатьМенеджерыКонвертации()
	
	Менеджеры = Новый Соответствие;
	Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера"), Обработки.рмкМенеджерКонвертации.Создать());
	
	Если ПодключаемыйМенеджерКонвертацииСуществует() Тогда
	
		ПодключитьВнешнююОбработкуМенеджераКонвертации();
		Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.МетодВстроенногоМенеджера"), ВнешниеОбработки.рмкМенеджерКонвертации.Создать());
		
	КонецЕсли;
	
	//Менеджеры.Вставить(ПредопределенноеЗначение("Перечисление.рмкСпособыСериализации.ПлатформеннаяСериализация"), Обработки.рмкМенеджерПлатформеннойСериализации.Создать());
	
	Возврат Менеджеры;
	
КонецФункции		

Функция ПолучитьМенеджерКонвертации(Менеджеры, СпособСериализации)
	
	МенеджерКонвертации = Менеджеры.Получить(СпособСериализации);
	
	Если МенеджерКонвертации = Неопределено Тогда
		ВызватьИсключение СтрШаблон("Не инициализирован менеджер конвертации для способа %1", СпособСериализации);
	КонецЕсли;
	
	Возврат МенеджерКонвертации;
	
КонецФункции	

Процедура ЗафиксироватьСтатусСообщения(Сообщение, СтатусСтрокой, ТекстСообщения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.рмкСтатусыСообщений.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сообщение 		= Сообщение;
	МенеджерЗаписи.Идентификатор 	= Новый УникальныйИдентификатор;
	МенеджерЗаписи.Статус 			= ПредопределенноеЗначение("Перечисление.рмкСтатусыСообщений." + СтатусСтрокой);
	МенеджерЗаписи.Информация 		= ТекстСообщения;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры
	